<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL数据库数据类型</title>
      <link href="/posts/19283750/"/>
      <url>/posts/19283750/</url>
      
        <content type="html"><![CDATA[<h2 id="数值类型">数值类型<a class="header-anchor" href="#数值类型">•</a></h2><ul class="lvl-0"><li class="lvl-2">整数类型<ul class="lvl-2"><li class="lvl-6"><code>TINYINT</code>：1字节<ul class="lvl-4"><li class="lvl-10"><code>TINYINT(1)</code>：(0表示false，1表示true)对应布尔值</li></ul></li><li class="lvl-6"><code>SMALLINT</code>：2字节</li><li class="lvl-6"><code>MEDIUMINT</code>：3字节</li><li class="lvl-6"><code>INT</code>或 <code>INTEGER</code>：4字节</li><li class="lvl-6"><code>BIGINT</code>：8字节</li></ul></li><li class="lvl-3">浮点类型<ul class="lvl-2"><li class="lvl-6"><code>FLOAT</code>：4字节，单精度浮点数</li><li class="lvl-6"><code>DOUBLE</code>：8字节，双精度浮点数</li><li class="lvl-6"><code>DECIMAL</code>：精确浮点数，指定总位数和小数位数，存储为字符串<ul class="lvl-4"><li class="lvl-10"><code>DECIMAL(10, 2)</code>：指总位数10位，小数2位</li></ul></li></ul></li></ul><h2 id="字符串类型">字符串类型<a class="header-anchor" href="#字符串类型">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>定长字符串</p><ul class="lvl-2"><li class="lvl-6"><code>CHAR(M)</code>：固定长度，最多255个字符</li></ul></li><li class="lvl-2"><p>变长字符串</p><ul class="lvl-2"><li class="lvl-6"><code>VARCHAR(M)</code>：可变长度，最多65535个字符</li></ul></li><li class="lvl-2"><p>文本类型</p><ul class="lvl-2"><li class="lvl-6"><code>TINYTEXT</code>：最多255个字符</li><li class="lvl-6"><code>TEXT</code>：最多65535个字符</li><li class="lvl-6"><code>MEDIUMTEXT</code>：最多 16777215 个字符</li><li class="lvl-6"><code>LONGTEXT</code>：最多 4294967295 个字符</li></ul></li><li class="lvl-2"><p>二进制类型</p><ul class="lvl-2"><li class="lvl-6"><code>BINARY(M)</code>：固定长度二进制数据</li><li class="lvl-6"><code>VARBINARY(M)</code>：可变长度二进制数据</li></ul></li><li class="lvl-2"><p>大对象类型</p><ul class="lvl-2"><li class="lvl-6"><code>TINYBLOB</code>：最多255个字节的二进制数据</li><li class="lvl-6"><code>BLOB</code>：最多 65535 字节的二进制数据</li><li class="lvl-6"><code>MEDIUMBLOB</code>：最多 16777215 字节的二进制数据</li><li class="lvl-6"><code>LONGBLOB</code>：最多 4294967295 字节的二进制数据</li></ul></li></ul><h2 id="日期和时间类型">日期和时间类型<a class="header-anchor" href="#日期和时间类型">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p><code>DATE</code>：日期，格式为<code>YYYY-MM-DD</code></p></li><li class="lvl-2"><p><code>TIME</code>：时间，格式为<code>HH:MM:SS</code></p></li><li class="lvl-2"><p><code>DATETIME</code>：日期和时间，格式为<code>YYYY-MM-DD HH:MM:SS</code></p></li><li class="lvl-2"><p><code>TIMESTAMP</code>：时间戳，格式为<code>YYYY-MM-DD HH:MM:SS</code>，自动更新</p><ul class="lvl-2"><li class="lvl-6"><code>timestamp_column TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code>：<code>DEFAULT CURRENT_TIMESTAMP</code>表示当插入新行时，如果没有为 <code>timestamp_column</code> 提供显式值，它会自动设置为当前时间（插入时的时间）。<code>ON UPDATE CURRENT_TIMESTAMP</code>表示每次更新行时，<code>timestamp_column</code> 会自动更新为当前时间（更新时的时间）。</li></ul></li><li class="lvl-2"><p><code>YEAR</code>：年份，格式为<code>YYYY</code></p></li></ul><h2 id="枚举和集合类型">枚举和集合类型<a class="header-anchor" href="#枚举和集合类型">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p><code>ENUM</code>：枚举类型，允许的值列表，单选</p></li><li class="lvl-2"><p><code>SET</code>：集合类型，一个或多个值的结合，允许的值列表，多选</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/posts/f85ddf3d/"/>
      <url>/posts/f85ddf3d/</url>
      
        <content type="html"><![CDATA[<p>防抖（Debounce）和节流（Throttle）是两种常见的技术，用于控制频繁触发的事件（例如，窗口调整大小、滚动、输入等）的执行次数，避免性能问题。两者的主要区别在于它们处理事件触发的方式。</p><h2 id="防抖（DEBOUNCE">防抖（Debounce)<a class="header-anchor" href="#防抖（DEBOUNCE">•</a></h2><p>防抖的原理时确保在一定时间间隔内，只执行一次函数。如果在该时间间隔内再次触发事件，计时器会重新计时。防抖主要用于处理用户输入事件，如搜索框的自动补全。</p><p>防止用户误操作，优化用户体验，优化性能。</p><p>在用户操作后等待一段时间。用户在这段时间内没有再进行操作就执行函数，如果用户在这段时间内再次操作就会重新计时，再次等待，直至用户没有操作才执行函数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) {</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) {</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> func.<span class="title function_">apply</span>(context, args), wait)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="keyword">const</span> handleResize = <span class="title function_">debounce</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"window resized"</span>)</span><br><span class="line">}, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">"resize"</span>, handleResize)</span><br></pre></td></tr></tbody></table></figure><h2 id="节流（THROTTLE）">节流（Throttle）<a class="header-anchor" href="#节流（THROTTLE）">•</a></h2><p>节流的原理是确保在一定时间间隔内，函数最多只执行一次。节流主要用于处理滚动事件、窗口滚动和页面缩放等高频事件。</p><p>防止用户恶意频繁触发高消耗的操作，优化性能。</p><p>在一段时间内只会执行一次用户操作所触发的函数。在这段时间内无论用户操作多少次，都只会执行一次函数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) {</span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) {</span><br><span class="line">        <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        <span class="keyword">if</span> (now - lastTime &gt;= wait) {</span><br><span class="line">            lastTime = now</span><br><span class="line">            func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="keyword">const</span> handleScroll = <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"window scrolled"</span>)</span><br><span class="line">}, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">"scroll"</span>, handleScroll)</span><br></pre></td></tr></tbody></table></figure><h2 id="区别总结">区别总结<a class="header-anchor" href="#区别总结">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p><strong>防抖</strong>：在事件触发后的一定时间内不再触发，才会执行函数。如果在这段时间内事件再次触发，则重新计时。适用于需要在停止频繁触发后执行的场景。</p></li><li class="lvl-2"><p><strong>节流</strong>：在一定时间间隔内最多执行一次函数，无论事件触发频率多高。适用于需要限制频率的场景。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>localStorage和sessionStorage</title>
      <link href="/posts/3749c4bb/"/>
      <url>/posts/3749c4bb/</url>
      
        <content type="html"><![CDATA[<h2 id="区别">区别<a class="header-anchor" href="#区别">•</a></h2><ul class="lvl-0"><li class="lvl-2">都是Web Storage API提供的存储机制，用于在客户端存储数据</li><li class="lvl-2">主要区别在于数据的持久性和存储时间</li></ul><h3 id="LOCALSTORAGE">localStorage<a class="header-anchor" href="#LOCALSTORAGE">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p><strong>持久性</strong>：数据存储在<code>localStorage</code>中是持久的，除非用户手动清除浏览器缓存或者通过js删除，否则数据不会过期。</p></li><li class="lvl-2"><p><strong>存储时间</strong>：数据会在浏览器关闭后依然保留，因此适用于需要长期保存的数据，如用户设置或者偏好。</p></li><li class="lvl-2"><p><strong>存储容量</strong>：大多数浏览器提供约5MB的存储空间。</p></li><li class="lvl-2"><p><strong>数据共享</strong>：数据在同一来源下的所有窗口和标签页之间共享。</p></li><li class="lvl-2"><p><strong>使用场景</strong>：保存用户设置、主题选择、语言偏好等长期数据。</p></li></ul><p>具体方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">"key"</span>, <span class="string">"value"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">"key"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">"key"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></tbody></table></figure><h3 id="SESSIONSTORAGE">sessionStorage<a class="header-anchor" href="#SESSIONSTORAGE">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p><strong>持久性</strong>：数据存储在<code>sessionStorage</code>中是临时的，数据只会在当前会话（即当前浏览器窗口或标签页）中有效。当浏览器窗口或标签页关闭时，数据会被清除。</p></li><li class="lvl-2"><p><strong>存储时间</strong>：数据仅在浏览器窗口或标签页的生命周期内有效，适用于需要在短时间内保存的数据，例如表单数据或临时状态。</p></li><li class="lvl-2"><p><strong>存储容量</strong>：大多数浏览器提供约 5MB 的存储空间，与 <code>localStorage</code> 相同。</p></li><li class="lvl-2"><p><strong>数据共享</strong>：数据仅在同一标签页中共享。</p></li><li class="lvl-2"><p><strong>使用场景</strong>：暂时存储表单输入值或用户会话数据或临时的状态。</p></li></ul><p>具体方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">"key"</span>, <span class="string">"value"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">const</span> value = sessionStorage.<span class="title function_">getItem</span>(<span class="string">"key"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(<span class="string">"key"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有数据</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript面试题</title>
      <link href="/posts/8b672d54/"/>
      <url>/posts/8b672d54/</url>
      
        <content type="html"><![CDATA[<h2 id="基本类型">基本类型<a class="header-anchor" href="#基本类型">•</a></h2><ul class="lvl-0"><li class="lvl-2">undefined</li><li class="lvl-2">null</li><li class="lvl-2">boolean</li><li class="lvl-2">number</li><li class="lvl-2">string</li><li class="lvl-2">symbol</li><li class="lvl-2">bigint</li></ul><h2 id="引用类型">引用类型<a class="header-anchor" href="#引用类型">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>array</p></li><li class="lvl-2"><p>object</p></li><li class="lvl-2"><p>function</p></li><li class="lvl-2"><p>regexp</p></li><li class="lvl-2"><p>date</p></li></ul><h2 id="内置的对象">内置的对象<a class="header-anchor" href="#内置的对象">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>String（常用）</p></li><li class="lvl-2"><p>Boolean</p></li><li class="lvl-2"><p>Number</p></li><li class="lvl-2"><p>Array（常用）</p></li><li class="lvl-2"><p>Object</p></li><li class="lvl-2"><p>Function</p></li><li class="lvl-2"><p>Math（常用）</p></li><li class="lvl-2"><p>Date（常用）</p></li><li class="lvl-2"><p>RegExp</p></li></ul><h2 id="数组">数组<a class="header-anchor" href="#数组">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>push()</p></li><li class="lvl-2"><p>pop()</p></li><li class="lvl-2"><p>sort()</p></li><li class="lvl-2"><p>splice()</p></li><li class="lvl-2"><p>join()</p></li><li class="lvl-2"><p>map()</p></li><li class="lvl-2"><p>filter()</p></li><li class="lvl-2"><p>reduce()</p></li><li class="lvl-2"><p>concat()</p></li><li class="lvl-2"><p>reverse()</p></li></ul><h2 id="类型判断">类型判断<a class="header-anchor" href="#类型判断">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>typeof()：判断基本类型</p></li><li class="lvl-2"><p>instanceof()：判断引用类型</p></li></ul><h2 id="清除数组中的重复元素">清除数组中的重复元素<a class="header-anchor" href="#清除数组中的重复元素">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>使用<code>Set</code></p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> uniqueArray = [...<span class="keyword">new</span> <span class="title class_">Set</span>(array)]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArray) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> uniqueArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(array))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArray) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用<code>filter</code>和<code>indexOf</code></p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> uniqueArray = array.<span class="title function_">filter</span>(<span class="function">(<span class="params">value, index, self</span>) =&gt;</span> self.<span class="title function_">indexOf</span>(value) === index)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArray) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用<code>reduce</code></p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> uniqueArray = array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, value</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (!acc.<span class="title function_">includes</span>(value)) acc.<span class="title function_">push</span>(value)</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">}, [])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArray) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Lodash库</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">"lodash"</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> uniqueArray = _.<span class="title function_">uniq</span>(array)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueArray) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS面试题</title>
      <link href="/posts/3b5bdfda/"/>
      <url>/posts/3b5bdfda/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS面试题">CSS面试题<a class="header-anchor" href="#CSS面试题">•</a></h1><h2 id="合模型">合模型<a class="header-anchor" href="#合模型">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>盒模型</p><ul class="lvl-2"><li class="lvl-6">W3C标准盒模型：width，height包含content，不包含border和padding</li><li class="lvl-6">IE盒模型：width，height包含border和padding（content+border+padding）</li><li class="lvl-6">box-sizing：设置是什么模型<ul class="lvl-4"><li class="lvl-10">content-box（默认）：W3C标准盒模型（content就是content），border，padding会另外加上，导致width和height无法对盒模型的大小进行设置</li><li class="lvl-10">border-box：IE盒模型，width和height都是border+padding+content，这样width和height就可以对盒模型的大小进行设置</li></ul></li></ul></li></ul><h2 id="MARGIN重叠">margin重叠<a class="header-anchor" href="#MARGIN重叠">•</a></h2><p>相邻的两个盒子或者多个盒子的margin重叠，导致设置margin不符合预期</p><ul class="lvl-0"><li class="lvl-2"><p>解决办法</p><ul class="lvl-2"><li class="lvl-6">底部的元素设置为浮动<code>float: left</code></li><li class="lvl-6">底部的元素设置脱离文档流<code>position: absolute/fixed</code></li><li class="lvl-6">统一设置<code>margin-top/margin-bottom</code></li></ul></li></ul><h2 id="文档流">文档流<a class="header-anchor" href="#文档流">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>标准文档流：元素默认自动从左到右，从上到下的排序方式</p></li><li class="lvl-2"><p>块级元素：div，li，h1~h4，p</p></li><li class="lvl-2"><p>行内元素：span，a，input，select，textarea，img</p></li><li class="lvl-2"><p>定位</p><ul class="lvl-2"><li class="lvl-6">static（默认）</li><li class="lvl-6">relative（相对定位，没有脱离文档流，父级元素使用）</li><li class="lvl-6">absolute（绝对定位，脱离文档流，子级元素使用）</li><li class="lvl-6">fixed（固定到可视视图中的位置，脱离文档流）</li><li class="lvl-6">sticky（粘性定位，滚动到特定位置后固定在可视视图的位置，脱离文档流）</li></ul></li></ul><h2 id="优先级">优先级<a class="header-anchor" href="#优先级">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p><code>!important</code> &gt; 内联样式<code>style="color: red;"</code> &gt; id<code>#id</code> &gt; 类<code>.foo</code>/伪类<code>:first-child</code>/属性选择器<code>div[class="foo"]</code> &gt; 标签<code>div, h1</code> &gt; 通配符<code>*</code></p></li></ul><h2 id="浮动">浮动<a class="header-anchor" href="#浮动">•</a></h2><h3 id="为什么要清除浮动">为什么要清除浮动<a class="header-anchor" href="#为什么要清除浮动">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>防止父元素高度坍塌，因为浮动元素脱离文档流，不再占据父元素的高度。如果父元素只包含浮动元素，父元素的高度会是0，从而影响后续的布局</p></li><li class="lvl-2"><p>避免后续元素受浮动元素影响</p></li></ul><h3 id="清除浮动">清除浮动<a class="header-anchor" href="#清除浮动">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>使用<code>clear</code>属性</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.float-left</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.clear</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-left"</span>&gt;</span>Left float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-left"</span>&gt;</span>Left float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Non-floated content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用伪元素清除浮动</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden; <span class="comment">/* 也可以使用 clearfix */</span></span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.float-left</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">""</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-left"</span>&gt;</span>Left float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-left"</span>&gt;</span>Left float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Non-floated content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用<code>overfow</code>属性</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.float-left</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-left"</span>&gt;</span>Left float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-left"</span>&gt;</span>Left float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Non-floated content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="单位">单位<a class="header-anchor" href="#单位">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>px：像素，浏览器最小是12px，还想要设置更小的话可以使用<code>transform:scale(0.8)</code>，但是位置可能会不符合预期，可以使用<code>transform-origin: 0 0</code>设置位置的对齐</p></li><li class="lvl-2"><p>rem：相对单位，相对于html根节点的<code>font-size</code>的值</p></li></ul><h2 id="元素居中">元素居中<a class="header-anchor" href="#元素居中">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>水平居中使用<code>margin: 0 auto</code>（块级元素）、<code>text-align: center</code>（行内元素）</p></li><li class="lvl-2"><p>flex布局</p></li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul class="lvl-0"><li class="lvl-2"><p>grid布局</p></li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    place-items: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul class="lvl-0"><li class="lvl-2"><p>绝对定位</p></li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.centered</span> {</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域的方法</title>
      <link href="/posts/3a68f348/"/>
      <url>/posts/3a68f348/</url>
      
        <content type="html"><![CDATA[<h1 id="跨域问题">跨域问题<a class="header-anchor" href="#跨域问题">•</a></h1><p>由于浏览器有一个安全功能——同源策略，即同协议，同域名，同端口。只要有一个不同就会产生跨域问题。同源策略会在请求后端接口的时候抛出一个错误，导致无法请求后端服务。</p><blockquote><p>跨域问题只会出现在前端浏览器，服务端不会涉及跨域问题，也就是一个服务端请求另一个服务端的时候不会出现跨域问题</p></blockquote><h1 id="代理服务器-反向代理">代理服务器(反向代理)<a class="header-anchor" href="#代理服务器-反向代理">•</a></h1><p>webpack、vue和react都采用代理的方案来解决跨域问题，这种方式只在本地开发有效，因为是运行在node上的。</p><p>如果不想依赖这些框架和工具可以使用<a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a>，这个中间件可以实现快捷的代理。</p><p>在线上可以使用<a href="https://www.nginx.com/">nginx</a>、<a href="https://httpd.apache.org/">apache</a>等反向代理服务器实现代理</p><h1 id="JSONP">jsonp<a class="header-anchor" href="#JSONP">•</a></h1><p>jsonp是一种非正规的手法，它通过标签的设计“漏洞”来解决跨域问题。</p><p><code>&lt;script&gt;</code>和<code>&lt;img&gt;</code>标签中有一个<code>src</code>的属性 ，这个属性没有跨域限制。<code>&lt;script&gt;</code>的src属性可以引入一些cdn资源，自然也可以通过这个属性来请求后端接口，由此有了jsonp这种非常规方案。</p><blockquote><p>jsonp只支持get请求</p></blockquote><p><a href="https://juejin.cn/post/6993257017053806623">这篇文章</a>描述了jsonp这种方案是如何实现的和方法是如何封装的。</p><p>如果不想自己封装方法，也可以使用<a href="https://api.jquery.com/jquery.ajax/">jquery.ajax</a>来实现，jquery在ajax方法中也提供了通过jsonp获取数据的方法。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery中通过jsonp跨域的实例</span></span><br><span class="line">&nbsp; $.<span class="title function_">ajax</span>({</span><br><span class="line">&nbsp; &nbsp; <span class="attr">url</span>: <span class="string">"https://xxxx"</span>,</span><br><span class="line">&nbsp; &nbsp; <span class="attr">type</span>: <span class="string">"GET"</span>,</span><br><span class="line">&nbsp; &nbsp; <span class="attr">dataType</span>: <span class="string">"jsonp"</span>,</span><br><span class="line">&nbsp; &nbsp; <span class="attr">jsonp</span>: <span class="string">"callback"</span>,</span><br><span class="line">&nbsp; &nbsp; <span class="attr">jsonpCallback</span>: <span class="string">"callback"</span>,</span><br><span class="line">&nbsp; &nbsp; <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>){},</span><br><span class="line">&nbsp; &nbsp; <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>){},</span><br><span class="line">&nbsp; });</span><br></pre></td></tr></tbody></table></figure><h1 id="后端设置跨域-CORS">后端设置跨域(CORS)<a class="header-anchor" href="#后端设置跨域-CORS">•</a></h1><p>后端设置请求返回的响应头，启用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS）</a>，此时就可以使用<code>XMLHttpRequest</code>、<code>fetch</code>、<code>aixos</code>来正常请求资源。</p><h1 id="两种方案的使用场景">两种方案的使用场景<a class="header-anchor" href="#两种方案的使用场景">•</a></h1><ul class="lvl-0"><li class="lvl-2"><p>一般项目都需要上线服务器，服务器上配置代理服务器就使用<strong>反向代理</strong>，本地开发就按项目线上的情况来选择或者使用项目框架的代理。</p></li><li class="lvl-2"><p>如果项目是部署在一些无法设置代理的公共平台，如Github Pages上，就无法在线上进行代理，使用<strong>jsonp</strong>或者<strong>CORS</strong>将是最好的选择</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prettier的简单配置</title>
      <link href="/posts/aa8f87ba/"/>
      <url>/posts/aa8f87ba/</url>
      
        <content type="html"><![CDATA[<h1 id="PRETTIER的官方链接">Prettier的官方链接<a class="header-anchor" href="#PRETTIER的官方链接">•</a></h1><ul class="lvl-0"><li class="lvl-2"><a href="https://github.com/prettier/prettier">github</a></li><li class="lvl-2"><a href="https://prettier.io/">官网</a></li></ul><h1 id="PRETTIER配置示例">Prettier配置示例<a class="header-anchor" href="#PRETTIER配置示例">•</a></h1><p>项目根目录的<code>.prettierrc.cjs/.prettierrc.js</code>文件的配置示例，更多选项可在<a href="https://prettier.io/docs/en/options.html">这里</a>查看</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">120</span>, <span class="comment">// 单行长度</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>, <span class="comment">// 缩进长度</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>, <span class="comment">// 缩进样式</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">true</span>, <span class="comment">// 句末分号</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">  <span class="attr">quoteProps</span>: <span class="string">'as-needed'</span>, <span class="comment">// 对象的key引号</span></span><br><span class="line">  <span class="attr">jsxSingleQuote</span>: <span class="literal">true</span>, <span class="comment">// jsx中单引号</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">'all'</span>, <span class="comment">// 尾随逗号</span></span><br><span class="line">  <span class="attr">bracketSpacing</span>: <span class="literal">true</span>, <span class="comment">// 对象前后空格-eg: { foo: bar }</span></span><br><span class="line">  <span class="attr">bracketSameLine</span>: <span class="literal">false</span>, <span class="comment">// 多属性html标签的'&gt;'折行</span></span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">'always'</span>, <span class="comment">// 单参数箭头函数参数周围使用圆括号-eg: (x) =&gt; x</span></span><br><span class="line">  <span class="attr">requirePragma</span>: <span class="literal">false</span>, <span class="comment">// 顶部注释格式化</span></span><br><span class="line">  <span class="attr">insertPragma</span>: <span class="literal">false</span>, <span class="comment">// 文件顶部已格式化标注</span></span><br><span class="line">  <span class="attr">proseWrap</span>: <span class="string">'preserve'</span>, <span class="comment">// 文本样式换行(Markdown)</span></span><br><span class="line">  <span class="attr">htmlWhitespaceSensitivity</span>: <span class="string">'css'</span>, <span class="comment">// HTML全局空白敏感度</span></span><br><span class="line">  <span class="attr">vueIndentScriptAndStyle</span>: <span class="literal">true</span>, <span class="comment">// vue中的script及style标签缩进</span></span><br><span class="line">  <span class="attr">endOfLine</span>: <span class="string">'lf'</span>, <span class="comment">// 结束行形式</span></span><br><span class="line">  <span class="attr">embeddedLanguageFormatting</span>: <span class="string">'auto'</span>, <span class="comment">// 引用代码格式化</span></span><br><span class="line">  <span class="attr">singleAttributePerLine</span>: <span class="literal">false</span>, <span class="comment">// 每行单个属性样式</span></span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h1 id="PRETTIER与ESLINT兼容">prettier与eslint兼容<a class="header-anchor" href="#PRETTIER与ESLINT兼容">•</a></h1><p><a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a>是prettier官方写的一个的eslint插件。</p><p>它通过关闭与prettier有可能冲突的规则达到prettier与eslint的兼容</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint-config-prettier # 安装</span><br></pre></td></tr></tbody></table></figure><p>在eslint配置文件中继承这个插件的规则</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.cjs/.eslintrc.js示例</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="comment">// 配置继承</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">'prettier'</span>],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="../../posts/19711/#ESLint%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B">这里</a>有一个我的eslint配置示例</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eslint的简单配置</title>
      <link href="/posts/d29113f6/"/>
      <url>/posts/d29113f6/</url>
      
        <content type="html"><![CDATA[<h1 id="ESLINT的官方链接">ESLint的官方链接<a class="header-anchor" href="#ESLINT的官方链接">•</a></h1><ul class="lvl-0"><li class="lvl-2"><a href="https://github.com/eslint/eslint">github</a></li><li class="lvl-2"><a href="https://zh-hans.eslint.org/">官网</a></li></ul><h1 id="ESLINT配置示例">ESLint配置示例<a class="header-anchor" href="#ESLINT配置示例">•</a></h1><p>项目根目录的<code>.eslintrc.cjs/.eslintrc.js</code>文件的配置示例，更多选项可在<a href="https://zh-hans.eslint.org/">官网</a>或<a href="https://github.com/eslint/eslint">github</a>上查看</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="comment">// 根目录标识</span></span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 环境变量</span></span><br><span class="line">  <span class="attr">env</span>: {</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">commonjs</span>: <span class="literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 忽略文件</span></span><br><span class="line">  <span class="attr">ignorePatterns</span>: [<span class="string">'**/public/**/*.js'</span>],</span><br><span class="line">  <span class="comment">// 解析器选项</span></span><br><span class="line">  <span class="attr">parserOptions</span>: {</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">'module'</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 配置继承</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">'eslint:recommended'</span>, <span class="string">'prettier'</span>],</span><br><span class="line">  <span class="comment">// 规则定义</span></span><br><span class="line">  <span class="attr">rules</span>: {</span><br><span class="line">    <span class="string">'no-undef'</span>: <span class="string">'off'</span>, <span class="comment">// 未声明变量</span></span><br><span class="line">    <span class="string">'no-unused-vars'</span>: <span class="string">'off'</span>, <span class="comment">// 未使用过的变量</span></span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bluetooth在archlinux上的使用</title>
      <link href="/posts/3cdc0be5/"/>
      <url>/posts/3cdc0be5/</url>
      
        <content type="html"><![CDATA[<h1 id="准备">准备<a class="header-anchor" href="#准备">•</a></h1><ol><li class="lvl-3"><p>下载拥有bluetoothctl的程序软件，在archlinux上可以下载bluetooth-utils</p></li><li class="lvl-3"><p>启动蓝牙服务</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable bluetooth #开机自启</span><br><span class="line">systemctl start bluetooth #开启服务</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li class="lvl-3"><p>将用户加入lp组</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G lp $USER</span><br></pre></td></tr></tbody></table></figure><h1 id="BLUETOOTHCTL">bluetoothctl<a class="header-anchor" href="#BLUETOOTHCTL">•</a></h1><ol><li class="lvl-3"><p>在终端输入bluetoothctl进入bluetoothctl的模式里</p></li><li class="lvl-3"><p>power on (打开控制电源)</p></li><li class="lvl-3"><p>agent on(打开代理)</p></li><li class="lvl-3"><p>default-agent(打开默认代理) //可以进行自动连接已配对过的设备</p></li><li class="lvl-3"><p>scan on(打开扫描)</p></li><li class="lvl-3"><p>pair $设备Mac号 (进行配对)</p></li><li class="lvl-3"><p>connect $设备Mac号 (手动连接)</p></li><li class="lvl-3"><p>scan off(关闭扫描)</p></li><li class="lvl-3"><p>exit(退出bluetooth模式)</p></li></ol><h1 id="设置自动启动蓝牙">设置自动启动蓝牙<a class="header-anchor" href="#设置自动启动蓝牙">•</a></h1><p>将 <code>/etc/bluetooth/main.conf</code>最后的<code>AutoEnable</code> 值修改为<code>true</code></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch Linux </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archlinux和windows双系统挂载</title>
      <link href="/posts/c16db384/"/>
      <url>/posts/c16db384/</url>
      
        <content type="html"><![CDATA[<h1 id="挂载">挂载<a class="header-anchor" href="#挂载">•</a></h1><ol><li class="lvl-3">在完成安装系统和安装grub包后进行挂载windows分区并进入windows系统</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> &nbsp;/mnt/windows10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount /dev/磁盘中windows系统分区 /mnt/windows10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li class="lvl-3"><p>删除archlinux预留分区：直接到windows的磁盘工具中删除archlinux的分区</p></li><li class="lvl-3"><p>删除archlinux的efi分区(选择windows引导的话)：</p></li></ol><p>打开windows Power Shell</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\windows\system32&gt; diskpart &nbsp; //进入磁盘模式</span><br><span class="line"></span><br><span class="line">DISKPART&gt; list volume &nbsp; //查看磁盘上的卷</span><br><span class="line"></span><br><span class="line">DISKPART&gt; <span class="built_in">select</span> vol <span class="number">2</span> &nbsp;//选择efi的分卷</span><br><span class="line"></span><br><span class="line">DISKPART&gt; assign letter=x &nbsp; //给efi分卷一个盘符号，此时已经可以在资源管理器上看见efi的盘，但是无法打开</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li class="lvl-3"><p>调出任务管理器，选中文件&gt;运行新文件&gt;选中efi盘&gt;删除GRUB&gt;进入EFI&gt;删除GRUB</p></li><li class="lvl-3"><p>回到windows Power Shell</p></li></ol><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DISKPART&gt; remove letter=x &nbsp; //移除efi盘符</span><br><span class="line"></span><br><span class="line">DISKPART&gt; <span class="keyword">exit</span> &nbsp;//退出</span><br></pre></td></tr></tbody></table></figure><h1 id="LINUX和WINDOWS时间统一">linux和windows时间统一<a class="header-anchor" href="#LINUX和WINDOWS时间统一">•</a></h1><p>linux使用的是UTC时间，而windows不是用UTC时间，所以要禁用掉。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timedatectl set-local-rtc 1</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch Linux </tag>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> 双系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串、数组和广义表</title>
      <link href="/posts/32c38e43/"/>
      <url>/posts/32c38e43/</url>
      
        <content type="html"><![CDATA[<h1 id="知识大纲">知识大纲<a class="header-anchor" href="#知识大纲">•</a></h1><ul class="lvl-0"><li class="lvl-2">串、数组和广义表<ul class="lvl-2"><li class="lvl-6">串<ul class="lvl-4"><li class="lvl-10">串的顺序存储</li><li class="lvl-10">串的链式存储</li><li class="lvl-10">模式匹配算法<ul class="lvl-6"><li class="lvl-14">BF算法</li><li class="lvl-14">KMP算法</li></ul></li></ul></li><li class="lvl-6">数组<ul class="lvl-4"><li class="lvl-10">特殊矩阵的压缩存储</li></ul></li><li class="lvl-6">广义表</li></ul></li></ul><h1 id="串">串<a class="header-anchor" href="#串">•</a></h1><h2 id="串的定义">串的定义<a class="header-anchor" href="#串的定义">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>串的逻辑结构与线性表相似，区别仅在与串的<strong>数据对象</strong>限定为<strong>字符集</strong></p></li><li class="lvl-2"><p>串是一种特殊的<strong>线性表</strong></p></li><li class="lvl-2"><p>串通常以<strong>整体</strong>作为操作的对象，线性表通常以<strong>单个元素</strong>作为操作对象</p></li><li class="lvl-2"><p>串或字符串：是由零个或多个字符组成的<strong>有序序列</strong></p></li><li class="lvl-2"><p>串值：<strong>双引号</strong>括起来的<strong>字符序列</strong></p></li><li class="lvl-2"><p>子串：一个串中<strong>任意个连续</strong>的字符组成的<strong>子序列</strong>（含空串）</p></li><li class="lvl-2"><p>真子串：指<strong>不包含自身</strong>的<strong>所有子串</strong></p></li><li class="lvl-2"><p>主串：<strong>包含子串</strong>的串相应地称为主串</p></li><li class="lvl-2"><p>子串位置：子串<strong>第一个字符</strong>在<strong>主串</strong>中的<strong>位置</strong></p></li><li class="lvl-2"><p>空串：<strong>零个字符</strong>的串</p></li><li class="lvl-2"><p>空格串：由<strong>空格组成</strong>的串</p></li><li class="lvl-2"><p>串相等：当且仅当两个串的<strong>长度相等</strong>并且各个<strong>对应位置上的字符</strong>都<strong>相等</strong></p></li></ul><h2 id="串的存储结构">串的存储结构<a class="header-anchor" href="#串的存储结构">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>顺序存储</p><ul class="lvl-2"><li class="lvl-6">用一组<strong>连续的存储单元</strong>存储串值的<strong>字符序列</strong></li><li class="lvl-6">串的存储可以用定长一维<strong>数组</strong>来表示</li><li class="lvl-6">顺序存储的字符串都是<strong>从下标为1</strong>的数组分量<strong>开始存储</strong>，<strong>下标为0</strong>的分量<strong>闲置不用</strong></li><li class="lvl-6"><strong>堆式</strong>顺序存储：在堆区上<strong>动态分配</strong>和<strong>释放</strong>字符数组空间</li></ul></li><li class="lvl-2"><p>链式存储</p><ul class="lvl-2"><li class="lvl-6">使用<strong>链式</strong>存储结构</li><li class="lvl-6">数据域为<strong>单个字符</strong></li><li class="lvl-6"><strong>块链存储</strong>：每个结点可以<strong>存放一个或多个字符</strong>，称每一个<strong>结点</strong>为<strong>块</strong>，称整个<strong>链表</strong>为<strong>块链结构</strong></li></ul></li></ul><h2 id="串的模式匹配算法">串的模式匹配算法<a class="header-anchor" href="#串的模式匹配算法">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>子串的定位运算一般称为<strong>模式匹配</strong>或<strong>串匹配</strong></p></li><li class="lvl-2"><p>著名的两种算法由<strong>BF</strong>和<strong>KMP</strong></p></li><li class="lvl-2"><p>BF算法</p><ul class="lvl-2"><li class="lvl-6">用指针i，j指示主串S和子串T中当前待比较的字符位置，i的初值为pos，j的初值为1</li><li class="lvl-6">如果两个串均未达到串尾，则循环执行以下操作<ul class="lvl-4"><li class="lvl-10">分别比较指针i，j所指的字符，若相等则指针i，j同时向后移动一位，继续比较</li><li class="lvl-10">若字符值不相等，则指针后退重新开始匹配，变成i=i-j+2，j=1，然后重新匹配（指针i，j最开始指向下标为1的数组元素，每次回溯时，指针i向后移动一位，指针j回到原点）</li></ul></li></ul></li></ul><p>模式匹配<strong>不一定</strong>从主串的<strong>第一个位置开始</strong>，可以从指定的主串中查找的起始位置pos</p><ul class="lvl-0"><li class="lvl-2"><p>KMP算法</p><ul class="lvl-2"><li class="lvl-6">当第一个位置就出现字符不匹配，子串移动到主串的第二位进行比较</li><li class="lvl-6">当其他位置出现字符不匹配，寻找公共前后缀</li><li class="lvl-6">当字符匹配时，子串的比较箭头后移动一位继续比较</li></ul></li></ul><p>让模式串（子串）<strong>向右</strong>滑动，将前缀的字符串之间移动到后缀字符串的位置，然后让子串的n号位在与主串当前位置进行比较</p><p>n=公共前后缀长度+1<br>只移动子串，让模式串（子串）向右移动，<strong>不需要回溯主串指针</strong></p><h1 id="数组">数组<a class="header-anchor" href="#数组">•</a></h1><h2 id="数组的定义">数组的定义<a class="header-anchor" href="#数组的定义">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>数组是由<strong>类型相同</strong>的数据元素构成的<strong>有序集合</strong>，每个元素称为<strong>数组元素</strong></p></li><li class="lvl-2"><p>数组是<strong>线性表的推广</strong>，特点是结构中的元素本身可以是具有某种结构的数据，但属于同一<strong>数据类型</strong></p></li><li class="lvl-2"><p>一维数组：若<strong>线性表</strong>中的数据元素为<strong>非结构的简单元素</strong>则称为一维数组</p></li><li class="lvl-2"><p>二维数组：若一维数组中的数据元素又是一维数据结构，则称为二维数组</p><ul class="lvl-2"><li class="lvl-6">二维数组的逻辑结构：<strong>非线性结构</strong>，<strong>线性结构定长的线性表</strong></li></ul></li></ul><h2 id="数组的顺序存储">数组的顺序存储<a class="header-anchor" href="#数组的顺序存储">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>一旦规定了其<strong>维度</strong>和<strong>各维度的长度</strong>，便可以为它<strong>分配空间</strong></p></li><li class="lvl-2"><p>给出<strong>一组下标</strong>则可以求相应的数组元素的<strong>存储位置</strong></p></li></ul><h2 id="特殊矩阵的压缩存储">特殊矩阵的压缩存储<a class="header-anchor" href="#特殊矩阵的压缩存储">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>矩阵：一个由<code>mxn</code>个元素排成的<code>m</code>行<code>n</code>列的表</p></li><li class="lvl-2"><p>矩阵的常规存储：将矩阵描述为一个<strong>二维数组</strong></p></li><li class="lvl-2"><p>矩阵的常规存储特点：</p><ul class="lvl-2"><li class="lvl-6">可以对其元素进行<strong>随机存取</strong></li><li class="lvl-6">矩阵的<strong>运算非常简单</strong></li><li class="lvl-6"><strong>存储密度为1</strong></li></ul></li><li class="lvl-2"><p>不适宜常规存储的矩阵：<strong>值相同</strong>的元素很多且<strong>某种规律分布</strong>；<strong>零元素多</strong></p></li><li class="lvl-2"><p>压缩存储：多个<strong>值相同</strong>的元素只分配<strong>一个</strong>元素值的<strong>存储空间</strong>，对<strong>零元素不分配空间</strong></p></li><li class="lvl-2"><p>能够压缩的矩阵</p><ul class="lvl-2"><li class="lvl-6"><ol><li class="lvl-9">对称矩阵（关于主对角线左右元素相同）</li></ol></li><li class="lvl-6"><ol start="2"><li class="lvl-9">三角矩阵（主对角线一边全为0/常数c）</li></ol></li><li class="lvl-6"><ol start="3"><li class="lvl-9">对角矩阵（所有非零元素都集中在对角线中心的带状区域中，其他元素全为0）</li></ol></li><li class="lvl-6"><ol start="4"><li class="lvl-9">稀疏矩阵（非零元素个数少）</li></ol></li></ul></li></ul><h1 id="广义表">广义表<a class="header-anchor" href="#广义表">•</a></h1><h2 id="广义表的定义">广义表的定义<a class="header-anchor" href="#广义表的定义">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>广义表是<strong>线性表的推广</strong>，也称为<strong>列表</strong></p></li><li class="lvl-2"><p>对于线性表而言，存储的数据元素只能是单个元素，而在广义表中，数据元素可以是<strong>单个元素</strong>，称为<strong>原子</strong>，也可以是一个<strong>广义表</strong>，称为<strong>子表</strong></p></li><li class="lvl-2"><p>广义表的定义是一个<strong>递归的定义</strong></p></li><li class="lvl-2"><p>表头：<strong>非空</strong>广义表的<strong>第一个元素</strong>，可以是<strong>单原子</strong>，也可以是<strong>子表（广义表）</strong></p></li><li class="lvl-2"><p>表尾：<strong>表头以外</strong>的全部元素构成的表，表尾一定是一个<strong>广义表</strong></p></li></ul><h2 id="广义表的存储结构">广义表的存储结构<a class="header-anchor" href="#广义表的存储结构">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>一对确定的表头和表尾可唯一确定广义表</p></li><li class="lvl-2"><p>表结点：由<strong>标志域</strong>，指示<strong>表头的指针域</strong>，指示<strong>表尾的指针域</strong>组成</p></li><li class="lvl-2"><p>原子结点：由<strong>标志域</strong>和<strong>值域</strong>组成</p></li><li class="lvl-2"><p>标志域：tag，tag=1表示结点为子表，tag=0表示结点为原子</p></li><li class="lvl-2"><p>广义表的深度：展开后所含的<strong>括号层数</strong></p></li><li class="lvl-2"><p>广义表的长度：广义表第一层的元素个数（<strong>第一个括号里的元素个数</strong>）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/posts/40f24371/"/>
      <url>/posts/40f24371/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表的逻辑定义">线性表的逻辑定义<a class="header-anchor" href="#线性表的逻辑定义">•</a></h1><ul class="lvl-0"><li class="lvl-2"><p>数据元素虽然不同，但是同一线性表中的元素必定具有<strong>相同的特性</strong>，即属于<strong>同一数据对象</strong></p></li><li class="lvl-2"><p><strong>相邻</strong>的数据元素之间存在着<strong>序偶关系</strong></p></li><li class="lvl-2"><p>诸如此类由<code>n(n&gt;=0)</code>个数据<strong>特性相同</strong>的元素构成的<strong>有限序列</strong>称为<strong>线性表</strong></p></li><li class="lvl-2"><p>线性表中元素的个数<code>n(n&gt;=0)</code>定义为<strong>线性表的长度</strong>，<code>n=0</code>时称为<strong>空表</strong></p></li><li class="lvl-2"><p>非空的线性表或线性结构的特点：</p><ul class="lvl-2"><li class="lvl-6">存在唯一的一个被称为“第一个”的数据元素</li><li class="lvl-6">存在唯一的一个被称为“最后一个”的数据元素</li><li class="lvl-6">除第一个数据元素之外，结构中的每个数据元素均只有一个前驱</li><li class="lvl-6">除最后一个数据元素之外，结构中的每个数据元素均只有一个后继</li></ul></li></ul><h2 id="常见的线性表的基本运算">常见的线性表的基本运算<a class="header-anchor" href="#常见的线性表的基本运算">•</a></h2><p><code>InitList(&amp;L)</code>：构造一个空的线性表<code>L</code>，即<strong>表的初始化</strong><br><code>ListLenght(L)</code>：返回<code>L</code>中数据元素个数，即<strong>求表长</strong><br><code>GetElem(L, i, &amp;e)</code>：用<code>e</code>返回<code>L</code>中第<code>i</code>个数据元素的值，<code>1&lt;=i&lt;=ListLenght(L)</code><code>LocateElem(L, e)</code>：返回<code>L</code>中第1个值与<code>e</code>相同的元素在<code>L</code>中的位置，若不存在，则返回值为0<br><code>ListInsert(&amp;L, i, e)</code>：在<code>L</code>中第<code>i</code>个位置之前插入新的数据元素<code>e</code>，<code>L</code>的长度加1<br><code>ListDelete(&amp;L, i)</code>：删除<code>L</code>的第<code>i</code>个数据元素，<code>L</code>的长度减1</p><h1 id="线性表的顺序存储结构">线性表的顺序存储结构<a class="header-anchor" href="#线性表的顺序存储结构">•</a></h1><h2 id="顺序表的定义">顺序表的定义<a class="header-anchor" href="#顺序表的定义">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>用一组<strong>地址连续</strong>的存储单元依次存储线性表的<strong>数据元素</strong>，也称作线性表的<strong>顺序存储结构</strong>或<strong>顺序映像</strong></p></li><li class="lvl-2"><p>用<strong>顺序存储结构</strong>的线性表称为<strong>顺序表</strong></p></li><li class="lvl-2"><p><strong>逻辑上相邻</strong>的数据元素，其<strong>物理次序也是相邻</strong>的</p></li></ul><h2 id="地址的计算方式">地址的计算方式<a class="header-anchor" href="#地址的计算方式">•</a></h2><blockquote><p>LOC(a<sub>i+1</sub>)=LOC(a<sub>i</sub>)+l</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>l</code>是每个元素需占用的存储单元</p></li><li class="lvl-2"><p>LOC(a<sub>i+1</sub>)是线性表的第<code>i+1</code>个数据元素的存储位置</p></li><li class="lvl-2"><p>LOC(a<sub>i</sub>)是第<code>i</code>个数据元素的存储位置</p></li></ul><p>线性表的第<code>i</code>个数据元素a<sub>i</sub>的存储位置为：</p><blockquote><p>LOC(a<sub>i</sub>)=LOC(a<sub>i</sub>)+(i-1)xl</p></blockquote><h2 id="顺序表类型定义">顺序表类型定义<a class="header-anchor" href="#顺序表类型定义">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>通常都是用<strong>数组</strong>来描述数据结构中的<strong>顺序存储结构</strong></p></li></ul><h2 id="顺序表的基本操作">顺序表的基本操作<a class="header-anchor" href="#顺序表的基本操作">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p><strong>1. 初始化</strong>：构造一个空的顺序表</p></li><li class="lvl-2"><p><strong>2. 取值</strong>：顺序存储结构具有<strong>随机存取</strong>的特点，可以通过<strong>数组下标</strong>定位得到</p><ul class="lvl-2"><li class="lvl-6">顺序表<strong>取值算法</strong>的<strong>时间复杂度</strong>为<code>O(1)</code></li></ul></li><li class="lvl-2"><p><strong>3. 查找</strong>：根据指定的元素值<code>e</code>，查找顺序表中第一个与<code>e</code>相等的元素，成功返回该元素在表中的位置序号，失败返回0</p><ul class="lvl-2"><li class="lvl-6">为确定元素在表中的位置，需和给定值进行比较的数据元素个数的期望值为查找算法在查找成功时的<strong>平均查找长度</strong>（ASL）</li><li class="lvl-6">顺序表<strong>按值查找算法</strong>的<strong>平均时间复杂度</strong>为<code>O(n)</code></li></ul></li><li class="lvl-2"><p><strong>4. 插入</strong>：在表的第<code>i(1&lt;=i&lt;=n+1)</code>个位置插入一个新的数据元素<code>e</code>，使长度为<code>n</code>的线性表变成长度为<code>n+1</code>的线性表</p><ul class="lvl-2"><li class="lvl-6">时间主要耗费在移动元素上，移动元素的个数<strong>取决于插入元素的位置</strong></li><li class="lvl-6">顺序表<strong>插入算法</strong>的<strong>平均时间复杂度</strong>为<code>O(n)</code></li></ul></li><li class="lvl-2"><p><strong>5. 删除</strong>：将表的第<code>i(1&lt;=i&lt;=n)</code>个元素删去，将长度为<code>n</code>的线性表变成长度为<code>n-1</code>的线性表</p><ul class="lvl-2"><li class="lvl-6">时间主要耗费在移动元素上，移动元素的个数<strong>取决于删除元素的位置</strong></li><li class="lvl-6">顺序表<strong>删除算法</strong>的<strong>平均时间复杂度</strong>为<code>O(n)</code></li></ul></li></ul><h1 id="线性表的链式存储结构">线性表的链式存储结构<a class="header-anchor" href="#线性表的链式存储结构">•</a></h1><ul class="lvl-0"><li class="lvl-2"><p>顺序表可以<strong>随机存取</strong>，在<strong>插入</strong>和<strong>删除</strong>时，需移动大量元素，数组有<strong>长度相对固定</strong>的静态特性。</p></li><li class="lvl-2"><p>当表中<strong>数据元素个数较多</strong>且<strong>变化较大</strong>时操作过程相对复杂，必然导致<strong>存储空间的浪费</strong></p></li><li class="lvl-2"><p><strong>链式存储结构</strong>可以解决以上问题</p></li></ul><h2 id="单链表">单链表<a class="header-anchor" href="#单链表">•</a></h2><h3 id="单链表的定义与表示">单链表的定义与表示<a class="header-anchor" href="#单链表的定义与表示">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>用一组<strong>任意的存储单元存储</strong>的数据元素，这组存储单元可以是连续的，也可以是不连续的。</p></li><li class="lvl-2"><p>单链表的结点包含两个域：<strong>数据域</strong>和<strong>指针域</strong></p></li><li class="lvl-2"><p>数据域用于<strong>存储数据元素信息</strong></p></li><li class="lvl-2"><p>指针域用于存储直接后继的<strong>存储位置</strong>，指针域中存储的信息称作<strong>指针或链</strong></p></li><li class="lvl-2"><p>单链表的每个结点中<strong>只包含一个指针链</strong></p></li><li class="lvl-2"><p>链表增加头结点的作用：</p><ul class="lvl-2"><li class="lvl-6">便于首元结点的处理。</li><li class="lvl-6">便于空表和非空表的统一处理。<ul class="lvl-4"><li class="lvl-10">不设头结点时，判断空表的条件为：<code>L == NULL</code></li><li class="lvl-10">增加头结点时，判断空表的条件为：<code>L -&gt; next == NULL</code></li></ul></li></ul></li><li class="lvl-2"><p><em>首元结点</em>：链表中存储第一个数据元素a<sub>1</sub>的结点</p></li><li class="lvl-2"><p><em>头结点</em>：在首元结点之前附设的一个结点，其指针域指向首元结点。头指针的数据域可以<strong>存储与数据元素类型相同</strong>的其他附加信息，也<strong>可不存储任何信息</strong></p></li><li class="lvl-2"><p><em>头指针</em>：链表中第一个结点的指针。设<strong>有头结点</strong>，头指针指向结点为线性表的<strong>头结点</strong>；<strong>不设头结点</strong>，头指针指向结点为线性表的<strong>首元结点</strong></p></li></ul><h3 id="单链表的基本操作">单链表的基本操作<a class="header-anchor" href="#单链表的基本操作">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p><strong>1. 初始化</strong>：构造一个空表</p></li><li class="lvl-2"><p><strong>2. 取值</strong>：从<strong>首元结点</strong>出发，顺着链域next<strong>逐个结点向下访问</strong></p><ul class="lvl-2"><li class="lvl-6">单链表的<strong>取值算法</strong>的<strong>平均时间复杂度</strong>为<code>O(n)</code></li></ul></li><li class="lvl-2"><p><strong>3. 查找</strong>：<strong>按值查找</strong>，从链表的<strong>首元结点出发</strong>，依次将结点值和给定值<code>e</code>进行比较，返回查找结果</p><ul class="lvl-2"><li class="lvl-6">单链表的<strong>查找算法</strong>的<strong>平均时间复杂度</strong>为<code>O(n)</code></li></ul></li><li class="lvl-2"><p><strong>4. 插入</strong>：假如要在<code>a</code>和<code>b</code>之间插入数据元素<code>x</code>，首先要<strong>生成一个数据域为<code>x</code>的结点</strong>，然后插入到单链表中。需要<strong>修改结点<code>a</code>中的指针域</strong>，使其指向结点<code>x</code>，而<strong>结点<code>x</code>中的指针域应指向结点<code>b</code></strong></p><ul class="lvl-2"><li class="lvl-6">语句描述：<code>s -&gt; next = p -&gt; next; p -&gt; next = s;</code></li><li class="lvl-6">如果表中有<code>n</code>个结点，则插入操作中合法的插入位置有<code>n+1</code>个，即<code>1&lt;=i&lt;=n+1</code>，<strong>当<code>i=n+1</code>时，新结点则插在链表尾部</strong></li><li class="lvl-6">单链表的<strong>插入算法</strong>的<strong>时间复杂度</strong>为<code>O(n)</code></li></ul></li><li class="lvl-2"><p><strong>5. 删除</strong>：首先要找到删除位置的元素的<strong>前驱结点</strong>，修改<strong>前驱结点的指针域</strong>，还要<strong>释放要删除结点的所占空间</strong>，所以，修改指针前，一个引入另一指针来<strong>临时保存要删除结点的地址以备释放</strong></p><ul class="lvl-2"><li class="lvl-6">语句描述：<code>p -&gt; next = p -&gt; next -&gt; next;</code></li><li class="lvl-6">单链表的<strong>删除算法</strong>的<strong>时间复杂度</strong>为<code>O(n)</code></li></ul></li><li class="lvl-2"><p><strong>6. 创建单链表</strong>：根据<strong>结点插入的位置不同</strong>，链表的创建方法可分为<strong>前插法</strong>和<strong>后插法</strong></p><ul class="lvl-2"><li class="lvl-6">前插法：通过将新结点逐个插入链表的头部（头结点之后）来创建链表</li><li class="lvl-6">后插法：通过将新结点逐个插入到链表的尾部来创建链表，<strong>需要增加一个尾指针</strong></li></ul></li></ul><h2 id="循环链表">循环链表<a class="header-anchor" href="#循环链表">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>将最后一个结点的指针域指向头结点，使整个链表形成一个环，这种<strong>首尾相接</strong>的链表就称为<strong>循环链表</strong></p></li></ul><h3 id="单循环链表">单循环链表<a class="header-anchor" href="#单循环链表">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>从任意一个结点出发都可以找到表中其他结点</p></li><li class="lvl-2"><p>单循环链表和单链表的<strong>操作区别</strong>：链表遍历时，判别当前指针<code>p</code><strong>是否指向表尾结点</strong>的终止条件不同</p></li><li class="lvl-2"><p>单链表的判别条件：<code>p != NULL</code>或者<code>p -&gt; next != NULL</code></p></li><li class="lvl-2"><p>单循环链表的判别条件：<code>p != L</code>或者<code>p -&gt; next != L</code></p></li></ul><h3 id="双向链表">双向链表<a class="header-anchor" href="#双向链表">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>在链表的每个结点中设置<strong>两个指针</strong>，一个<strong>指向后继结点</strong>，另一个<strong>指向前驱结点</strong>，就是<strong>双向链表</strong>，简称<strong>双链表</strong></p></li><li class="lvl-2"><p><code>p</code>为指向某个结点的指针：<code>p -&gt; next -&gt; prior = p -&gt; prior -&gt; next = p</code></p></li></ul><h2 id="顺序表和链表的比较">顺序表和链表的比较<a class="header-anchor" href="#顺序表和链表的比较">•</a></h2><ul class="lvl-0"><li class="lvl-3"><p>空间性能的比较</p><ul class="lvl-2"><li class="lvl-6">当线性表的长度变化较大，难以预估存储规模时，宜采用链表作为存储结构</li><li class="lvl-6">当线性表的长度变化不大，易于事先确定其大小时，宜采用顺序表作为存储结构</li></ul></li><li class="lvl-3"><p>时间性能的比较</p><ul class="lvl-2"><li class="lvl-6">若线性表的主要操作是和元素位置紧密相关的取值操作，很少做插入或删除时，宜采用顺序表作为存储结构</li><li class="lvl-6">对于频繁进行插入或删除操作的线性表，宜采用链表作为存储结构</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构绪论</title>
      <link href="/posts/b06cc6ec/"/>
      <url>/posts/b06cc6ec/</url>
      
        <content type="html"><![CDATA[<h1 id="知识框架">知识框架<a class="header-anchor" href="#知识框架">•</a></h1><ul class="lvl-0"><li class="lvl-2">绪论<ul class="lvl-2"><li class="lvl-6">数据结构（三要素）<ul class="lvl-4"><li class="lvl-10">逻辑结构<ul class="lvl-6"><li class="lvl-14">线性结构：线性表、栈、队列</li><li class="lvl-14">非线性结构：树、图、集合</li></ul></li><li class="lvl-10">存储结构（物理结构）</li><li class="lvl-10">数据的运算</li></ul></li><li class="lvl-6">五个特征<ul class="lvl-4"><li class="lvl-10">算法的定义</li><li class="lvl-10">五个特征：有穷性、确定性、可行性、输入、输出</li><li class="lvl-10">效率的度量<ul class="lvl-6"><li class="lvl-14">时间复杂度</li><li class="lvl-14">空间复杂度</li></ul></li></ul></li></ul></li></ul><h1 id="数据结构的基本概念">数据结构的基本概念<a class="header-anchor" href="#数据结构的基本概念">•</a></h1><h2 id="基本概念和术语">基本概念和术语<a class="header-anchor" href="#基本概念和术语">•</a></h2><h3 id="1-数据">1. 数据<a class="header-anchor" href="#1-数据">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p><strong>数据是信息的载体</strong>，是描述客观事物属性的数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符号的<strong>集合</strong></p></li></ul><h3 id="2-数据元素">2. 数据元素<a class="header-anchor" href="#2-数据元素">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>是数据的<strong>基本单位</strong>，通常作为一个整体进行考虑和处理</p></li><li class="lvl-2"><p>一个数据元素可有若干个<strong>数据项</strong>组成</p></li><li class="lvl-2"><p>数据项是构成<strong>数据元素</strong>的不可分割的<strong>最小单位</strong></p></li></ul><h3 id="3-数据对象">3. 数据对象<a class="header-anchor" href="#3-数据对象">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>具有<strong>相同性质</strong>的数据元素的<strong>集合</strong>，是数据的<strong>子集</strong></p></li></ul><h3 id="4-数据类型">4. 数据类型<a class="header-anchor" href="#4-数据类型">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>是<strong>一个值的集合和定义</strong>在此集合上的一组操作的<strong>总称</strong></p><ul class="lvl-2"><li class="lvl-6">原子类型：<strong>其值不可再分</strong>的数据类型</li><li class="lvl-6">结构类型：<strong>其值可以再分解为若干成分</strong>（分量）的数据类型</li><li class="lvl-6">抽象数据类型：抽象数据组织和与之相关的操作</li></ul></li></ul><h3 id="5-抽象数据类型（ADT）">5. 抽象数据类型（ADT）<a class="header-anchor" href="#5-抽象数据类型（ADT）">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>指一个数学模型以及定义在该模型上的<strong>一组操作</strong></p></li><li class="lvl-2"><p>不论其内部结构如何变化，只要它的<strong>数学特性不变</strong>，都不影响其外部的使用</p></li><li class="lvl-2"><p>通常用（数据对象、数据关系、本操作集）<strong>三元组</strong>表示抽象类型</p></li></ul><h3 id="6-数据结构">6. 数据结构<a class="header-anchor" href="#6-数据结构">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>任何问题中，数据元素不孤立存在，元素相互之间的关系为<strong>结构</strong></p></li><li class="lvl-2"><p>数据结构是相互之间存在<strong>一种或多种特定关系</strong>的<strong>数据元素的集合</strong></p></li><li class="lvl-2"><p>包含三方面内容：<strong>逻辑结构</strong>、<strong>存储结构</strong>、<strong>数据的运算</strong></p></li><li class="lvl-2"><p>算法的设计——逻辑结构</p></li><li class="lvl-2"><p>算法的实现——存储结构</p></li></ul><h2 id="数据结构的三要素">数据结构的三要素<a class="header-anchor" href="#数据结构的三要素">•</a></h2><h3 id="1-数据的逻辑结构">1. 数据的逻辑结构<a class="header-anchor" href="#1-数据的逻辑结构">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>指数据元素之间的<strong>逻辑关系</strong>，即从逻辑关系上描述数据</p></li><li class="lvl-2"><p>与数据的存储无关，是<strong>独立于计算机</strong>的</p></li><li class="lvl-2"><p>逻辑结构分为<strong>线性结构</strong>和<strong>非线性结构</strong></p></li><li class="lvl-2"><p>线性表——典型的线性结构</p></li><li class="lvl-2"><p>集合、树、图——典型的非线性结构</p></li></ul><h4 id="数据的逻辑结构分类">数据的逻辑结构分类<a class="header-anchor" href="#数据的逻辑结构分类">•</a></h4><ul class="lvl-0"><li class="lvl-2"><p>数据的逻辑结构</p><ul class="lvl-2"><li class="lvl-6">线性结构<ul class="lvl-4"><li class="lvl-10">一般线性表</li><li class="lvl-10">受限线性表<ul class="lvl-6"><li class="lvl-14">栈和队列</li><li class="lvl-14">串</li></ul></li><li class="lvl-10">线性表推广<ul class="lvl-6"><li class="lvl-14">数组</li><li class="lvl-14">广义表</li></ul></li></ul></li><li class="lvl-6">非线性结构<ul class="lvl-4"><li class="lvl-10">集合</li><li class="lvl-10">树形结构<ul class="lvl-6"><li class="lvl-14">一般树</li><li class="lvl-14">二叉树</li></ul></li><li class="lvl-10">图形结构<ul class="lvl-6"><li class="lvl-14">有向图</li><li class="lvl-14">无向图</li></ul></li></ul></li></ul></li><li class="lvl-2"><p>集合：结构中的数据元素之间除了“<strong>同属于一个集合</strong>”的关系外，无其他关系</p></li><li class="lvl-2"><p>线性结构：结构中的数据元素之间<strong>只存在一对一</strong>的关系</p></li><li class="lvl-2"><p>树形结构：结构中的数据元素之间存在<strong>一对多</strong>的关系</p></li><li class="lvl-2"><p>图状结构或网状结构：结构中的数据元素之间存在<strong>多对多</strong>的关系</p></li></ul><h3 id="2-数据的存储结构">2. 数据的存储结构<a class="header-anchor" href="#2-数据的存储结构">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>指数据结构在计算机中的表示（又称映像），也称<strong>物理结构</strong></p></li><li class="lvl-2"><p>包括<strong>数据元素的表示</strong>和<strong>关系的表示</strong></p></li><li class="lvl-2"><p>数据的存储结构是用<strong>计算机语言实现</strong>的<strong>逻辑结构</strong>，<strong>依赖于计算机语言</strong></p></li></ul><h4 id="数据的4种存储结构">数据的4种存储结构<a class="header-anchor" href="#数据的4种存储结构">•</a></h4><ul class="lvl-0"><li class="lvl-2"><p><em>顺序存储</em>：把<strong>逻辑上相邻</strong>的元素存储在<strong>物理位置上也相邻</strong>的存储单元里，元素之间的关系由存储单元的<strong>邻接关系</strong>来体现。（将数据存储在地址连续的存储单元里）</p><ul class="lvl-2"><li class="lvl-6">优点：实现<strong>随机存取</strong>，每个元素占用<strong>最少的存储空间</strong></li><li class="lvl-6">缺点：只能使用相邻的一整块存储单元，可能产生过多的<strong>外部碎片</strong></li></ul></li><li class="lvl-2"><p><em>链式存储</em>：不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的<strong>指针表示</strong>元素之间的逻辑关系（将数据存储在任意的存储单元里，通过保存地址的方式找到相关的数据元素）</p><ul class="lvl-2"><li class="lvl-6">优点：不会出现碎片现象，<strong>充分利用所有存储单元</strong></li><li class="lvl-6">缺点：每个元素因存储指针而<strong>占用额外的存储空间</strong>，并且只能实现<strong>顺序存取</strong></li></ul></li><li class="lvl-2"><p><em>索引存储</em>：在存储元素信息的同时，还<strong>建立附加的索引表</strong>。索引表中的每一项称为<strong>索引项</strong>，索引项的一般形式是：（关键字， 地址）</p><ul class="lvl-2"><li class="lvl-6">优点：<strong>检索速度快</strong></li><li class="lvl-6">缺点：增加附加索引表，<strong>占用较多的存储空间</strong>。<strong>增加</strong>和<strong>删除</strong>数据时要<strong>修改索引表</strong></li></ul></li><li class="lvl-2"><p><em>散列存储</em>：根据元素的<strong>关键字</strong>直接计算出该元素的<strong>存储地址</strong>，又称为<strong>Hash存储</strong>。</p><ul class="lvl-2"><li class="lvl-6">优点：<strong>检索</strong>、<strong>增加</strong>和<strong>删除</strong>结点的操作都很<strong>快</strong></li><li class="lvl-6">缺点：如果散列函数不好可能出现<strong>元素存储单元的冲突</strong>，解决冲突会增加时间和空间开销</li></ul></li></ul><h3 id="3-数据的运算">3. 数据的运算<a class="header-anchor" href="#3-数据的运算">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>施加在数据上的运算包括运算的<strong>定义</strong>和<strong>实现</strong></p></li><li class="lvl-2"><p>运算的定义是针对<strong>逻辑结构</strong>的，指出<strong>运算的功能</strong></p></li><li class="lvl-2"><p>运算的实现是针对<strong>存储结构</strong>的，指出<strong>运算的具体操作步骤</strong></p></li></ul><h1 id="算法和算法评价">算法和算法评价<a class="header-anchor" href="#算法和算法评价">•</a></h1><h2 id="算法的基本概念">算法的基本概念<a class="header-anchor" href="#算法的基本概念">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>算法是对特定问题<strong>求解步骤</strong>的一种描述，是指令的<strong>有限序列</strong>，其中每一条指令表示<strong>一个或多个操作</strong></p><ul class="lvl-2"><li class="lvl-6"><strong>有穷性</strong>：一个算法必须总是（对任何合法的输入值）在执行有穷步之后结束，且每一步都在有穷时间内完成</li><li class="lvl-6"><strong>确定性</strong>：算法中每一条指令必须有确切的含义（相同的输入只能得出相同的输出）</li><li class="lvl-6"><strong>可行性</strong>：一个算法是可行的，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现</li><li class="lvl-6"><strong>输入</strong>：一个算法有零个或多个的输入，这些输入取自于某个特定的对象的集合</li><li class="lvl-6"><strong>输出</strong>：一个算法有一个或多个的输出，这些输出是同输入有着某种特定关系的量</li></ul></li><li class="lvl-2"><p>设计一个“好”的算法应该考虑达到的目标</p><ul class="lvl-2"><li class="lvl-6"><strong>正确性</strong>：正确的解决求解问题</li><li class="lvl-6"><strong>可读性</strong>：具有良好的可读性</li><li class="lvl-6"><strong>健壮性</strong>：输入非法数据，做出适当的反应，不会产生莫名其妙的输出结构</li><li class="lvl-6"><strong>效率与低存储需求</strong>：效率指算法执行时间，存储量需求指算法执行过程中所需要的最大存储空间</li></ul></li></ul><h2 id="算法效率的度量">算法效率的度量<a class="header-anchor" href="#算法效率的度量">•</a></h2><ul class="lvl-0"><li class="lvl-2"><p>通过<strong>时间复杂度</strong>和<strong>空间复杂度</strong>来描述的</p></li></ul><h3 id="1-时间复杂度">1. 时间复杂度<a class="header-anchor" href="#1-时间复杂度">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>一个语句的频度是指该语句在算法中<strong>被重复执行的次数</strong></p></li><li class="lvl-2"><p>算法中所有的语句的<strong>频度之和</strong>记作<code>T(n)</code>，它是该算法<strong>问题规模</strong><code>n</code>的函数，时间复杂度主要<strong>分析<code>T(n)</code>的量级</strong></p></li><li class="lvl-2"><p>算法中的<strong>基本运算（<em>最深层循环内的语句</em>）的频度</strong>与<code>T(n)</code>同数量级，采用算法中<strong>基本运算的频度</strong><code>f(n)</code>来分析算法的时间复杂度</p></li><li class="lvl-2"><p>算法的时间复杂度记为：<code>T(n)=O(f(n))</code></p></li><li class="lvl-2"><p><code>O</code>含义是<code>T(n)</code>的<strong>数量级</strong></p></li><li class="lvl-2"><p>严格的数学意义：若<code>T(n)</code>和<code>f(n)</code>是定义在正整数集合上的两个函数，则存在正常数<code>C</code>和<code>n0</code>，使得当<code>n&gt;=n0</code>时，都满足<code>0&lt;=T(n)&lt;=C*f(n)</code></p></li><li class="lvl-2"><p>算法的时间复杂度不仅依赖于<strong>问题的规模</strong><code>n</code>，也取决于<strong>待输入数据的性质</strong>（如输入数据元素的初始状态）</p></li><li class="lvl-2"><p><strong>最坏时间复杂度</strong>：在最坏情况下，算法的时间复杂度</p></li><li class="lvl-2"><p><strong>平均时间复杂度</strong>：所有可能输入的实例在等概率出现的情况下，算法的期望运行时间</p></li><li class="lvl-2"><p><strong>最好时间复杂度</strong>：在最好的情况下，算法的时间复杂度</p></li></ul><h4 id="分析程序时间复杂性的规则">分析程序时间复杂性的规则<a class="header-anchor" href="#分析程序时间复杂性的规则">•</a></h4><ul class="lvl-0"><li class="lvl-2"><p>加法规则：<code>T(n) = T1(n) + T2(n) = O(f(n)) + O(g(n)) = O(max(f(n),g(n)))</code></p></li><li class="lvl-2"><p>乘法规则：<code>T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n) * g(n))</code></p></li><li class="lvl-2"><p>常见的渐进时间复杂度为：<code>O(1) &lt; O(nlog(2, n)) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</code></p></li></ul><p><em>注：log(2, n)以2为底</em></p><h3 id="2-空间复杂度">2. 空间复杂度<a class="header-anchor" href="#2-空间复杂度">•</a></h3><ul class="lvl-0"><li class="lvl-2"><p>算法的<strong>空间复杂度</strong><code>S(n)</code>，定义为该算法所耗费的<strong>存储空间</strong></p></li><li class="lvl-2"><p>是<strong>问题规模</strong>n的函数，记 <code>S(n) = O(g(n))</code></p></li><li class="lvl-2"><p>算法原地工作指算法所需<strong>辅助空间</strong>是常量，即<code>O(1)</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archlinux安装</title>
      <link href="/posts/c41c7d43/"/>
      <url>/posts/c41c7d43/</url>
      
        <content type="html"><![CDATA[<h1 id="ARCHLINUX安装">archlinux安装<a class="header-anchor" href="#ARCHLINUX安装">•</a></h1><h2 id="联网">联网<a class="header-anchor" href="#联网">•</a></h2><ol><li class="lvl-3"><p>iwctl</p></li><li class="lvl-3"><p>wpa_supplicant</p></li><li class="lvl-3"><p>dhcpcd</p></li></ol><h2 id="校对时间">校对时间<a class="header-anchor" href="#校对时间">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">timedatectl set-ntp <span class="literal">true</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="制作分区">制作分区<a class="header-anchor" href="#制作分区">•</a></h2><ol><li class="lvl-3"><p>查看磁盘</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsblk</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li class="lvl-3"><p>使用磁盘工具（可用fdisk、cfdisk、gdisk)</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdisk /dev/磁盘名称</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li class="lvl-3"><p>根据各磁盘工具的提示进行分区，最后写入即可</p></li><li class="lvl-3"><p>可分swap分区（需要睡眠功能的可选）、根分区、家分区（可选）、efi分区</p></li></ol><h2 id="EFI分区格式化">efi分区格式化<a class="header-anchor" href="#EFI分区格式化">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mkfs.fat -F32 /dev/磁盘分区名称</span></span><br></pre></td></tr></tbody></table></figure><h2 id="SWAP分区格式化与挂载">swap分区格式化与挂载<a class="header-anchor" href="#SWAP分区格式化与挂载">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mkswap /dev/磁盘分区名称</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">swapon /dev/磁盘分区名称</span></span><br></pre></td></tr></tbody></table></figure><h2 id="根分区和家分区格式化">根分区和家分区格式化<a class="header-anchor" href="#根分区和家分区格式化">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mkfs.ext4 /dev/磁盘分区名称</span></span><br></pre></td></tr></tbody></table></figure><p>可以选其他的格式，根分区和家分区的格式一样</p><h2 id="挂载分区">挂载分区<a class="header-anchor" href="#挂载分区">•</a></h2><ol><li class="lvl-3"><p>挂载根分区</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount /dev/磁盘分区名称 /mnt</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li class="lvl-3"><p>挂载家分区</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p /mnt/home</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount /dev/磁盘分区名称 /mnt/home</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li class="lvl-3"><p>挂载efi分区</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount /dev/磁盘分区名称 /mnt/boot</span></span><br></pre></td></tr></tbody></table></figure><h2 id="（可选）带有快照的分区">（可选）带有快照的分区<a class="header-anchor" href="#（可选）带有快照的分区">•</a></h2><ol><li class="lvl-3"><p>制作根分区</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mkfs.btrfs /dev/磁盘分区名称</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li class="lvl-3"><p>挂载分区</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount /dev/磁盘分区名称 /mnt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">btrfs su cr /mnt/@</span></span><br><span class="line">Create subvolume '/mnt/@'</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">btrfs su cr /mnt/@home</span></span><br><span class="line">Create subvolume '/mnt/@home'</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">btrfs su cr /mnt/@snapshots</span></span><br><span class="line">Create subvolume '/mnt/@snapshots'</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">btrfs su cr /mnt/@var_log</span></span><br><span class="line">Create subvolume '/mnt/@svar_log'</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li class="lvl-3"><p>让btrfs分区生效</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">umount /mnt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -o noatime.compress=lzo,space,space_cache=v2,subvol=@ /dev/磁盘根分区名称 /mnt</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li class="lvl-3"><p>挂载目录</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p /mnt/{boot,home,snapshots,var_log}</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -o noatime.compress=lzo,space,space_cache=v2,subvol=@home /dev/磁盘分区名称 /mnt/home</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -o noatime.compress=lzo,space,space_cache=v2,subvol=@snapshots /dev/磁盘分区名称 /mnt/snapshots</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount -o noatime.compress=lzo,space,space_cache=v2,subvol=@var_log /dev/磁盘分区名称 /mnt/var_log</span></span><br></pre></td></tr></tbody></table></figure><p>5.挂载efi分区</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount /dev/磁盘分区名称 /mnt/boot</span></span><br></pre></td></tr></tbody></table></figure><h2 id="安装系统">安装系统<a class="header-anchor" href="#安装系统">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pacstrap /mnt base linux linux-firmware vim</span></span><br></pre></td></tr></tbody></table></figure><h2 id="生成系统文件">生成系统文件<a class="header-anchor" href="#生成系统文件">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span></span><br></pre></td></tr></tbody></table></figure><h2 id="进入系统">进入系统<a class="header-anchor" href="#进入系统">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">arch-chroot /mnt</span></span><br></pre></td></tr></tbody></table></figure><h2 id="本地化配置">本地化配置<a class="header-anchor" href="#本地化配置">•</a></h2><ol><li class="lvl-3"><p>生成本地时间</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/大洲名称/地区名称/ /etc/localtime</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hwclock --systohc</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li class="lvl-3"><p>生成语言</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/locale.gen</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">locale-gen</span></span><br></pre></td></tr></tbody></table></figure><p>删除相应地区的注释，使用locale-gen指令生成本地语言</p><ol start="3"><li class="lvl-3"><p>配置语言文件</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/locale.conf</span></span><br></pre></td></tr></tbody></table></figure><p>输入“LANG=en_US.UTF-8“</p><ol start="4"><li class="lvl-3"><p>生成键盘映射</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/vconsole.conf</span></span><br></pre></td></tr></tbody></table></figure><p>“FONT=LatGrkCyr-12x22.psfu.gz”</p><ol start="5"><li class="lvl-3"><p>生成hostname</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/hostname</span></span><br></pre></td></tr></tbody></table></figure><ol start="6"><li class="lvl-3"><p>生成hosts</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/hosts</span></span><br></pre></td></tr></tbody></table></figure><ol start="7"><li class="lvl-3"><p>设置密码</p></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">passwd</span></span><br></pre></td></tr></tbody></table></figure><h2 id="下载必要软件">下载必要软件<a class="header-anchor" href="#下载必要软件">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pacman -S grub efibootmgr ntfs-3g sudo wpa_supplicant iwd snapper bluez bluez-utils intel-ucode xorg xorg-xinit alsa-utils pulseaudio pulseaudio-bluetooth base-devel linux-headers</span></span><br></pre></td></tr></tbody></table></figure><p>系统启动所需的软件：grub、efibootmgr、os-prober（识别多系统）</p><p>识别usb的软件：ntfs-3g</p><p>管理网络的软件：wpa_supplicant、iwd、networkmanager、wireless_tools</p><p>蓝牙驱动软件：bluez、bluez-utils</p><p>快照软件：snapper</p><p>cpu驱动：intel-ucode（intel的驱动）</p><p>图像化所需的软件：xorg、xorg-xinit（可选，用startx启动）</p><p>音频驱动：alsa-utils、pulseaudio、pulseaudio-bluetooth（支持蓝牙）</p><p>系统内核：base-devel、linux-headers</p><h2 id="安装GRUB包">安装grub包<a class="header-anchor" href="#安装GRUB包">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GUTB</span></span><br></pre></td></tr></tbody></table></figure><h2 id="生成GRUB文件">生成grub文件<a class="header-anchor" href="#生成GRUB文件">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span></span><br></pre></td></tr></tbody></table></figure><h2 id="创建普通用户">创建普通用户<a class="header-anchor" href="#创建普通用户">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">useradd -m -g <span class="built_in">users</span> -G wheel -s /bin/bash kaze</span></span><br></pre></td></tr></tbody></table></figure><p>useradd<br>-m //创建用户命令​-g //指定用户所属群组<br>-G//指定用户所属附属群组<br>-s//指定用户shell</p><h2 id="退出重启">退出重启<a class="header-anchor" href="#退出重启">•</a></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">reboot</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch Linux </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
